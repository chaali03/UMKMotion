---
// Simple, responsive navbar component for the landing page
// Uses brand colors and the provided logo at /LogoNavbar.png
---

<style>
  :root {
    --brand-blue: #001151;
    --brand-orange: #FD5701;
    --bg-soft: linear-gradient(180deg, rgba(0,17,81,0.02), rgba(253,87,1,0.02));
  }

  /* Hide navbar while intro is active */
  :global(html.intro-lock) header.nav,
  :global(body.intro-lock) header.nav,
  :global(html.intro-active) header.nav,
  :global(body.intro-active) header.nav {
    opacity: 0; 
    visibility: hidden; 
    pointer-events: none; 
  }
  /* Also disable entrance animation during intro to avoid flash */
  :global(html.intro-lock) header.nav.enter,
  :global(body.intro-lock) header.nav.enter,
  :global(html.intro-active) header.nav.enter,
  :global(body.intro-active) header.nav.enter { animation: none !important; }

  header.nav {
    position: sticky;
    top: 0;
    z-index: 60; /* below intro overlay (z-index: 50) when shown, but enough for content */
    background: transparent;
    --logo-h: clamp(20px, 3vw, 32px);
    --logo-shift: 0px;
    --logo-scale: 1; /* no enlargement */
    transition: transform .4s cubic-bezier(.25,.8,.25,1), background-color .35s ease, box-shadow .35s ease, backdrop-filter .35s ease, opacity .2s ease;
    will-change: transform, background-color;
    /* create a stacking context for the stroke pseudo-element */
    isolation: isolate;
    /* Ensure no margin or padding on header for desktop */
    margin: 0;
    padding: 0;
  }
  /* Bottom stroke that fades in when idle */
  header.nav::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 1px;
    background: linear-gradient(90deg, rgba(0,17,81,.14), rgba(0,17,81,.06));
    opacity: 0;
    transition: opacity .25s ease;
    pointer-events: none;
  }
  header.nav.scrolled { 
    background: linear-gradient(180deg, rgba(255,255,255,.85) 0%, rgba(255,255,255,.75) 100%);
    backdrop-filter: blur(12px) saturate(160%);
    -webkit-backdrop-filter: blur(12px) saturate(160%);
    box-shadow: 0 8px 32px rgba(0,17,81,.08), 0 2px 8px rgba(253,87,1,.04);
  }
  /* Idle stroke shown when user stops scrolling */
  header.nav.idle::after { 
    opacity: 1; 
    animation: strokeWave 2.4s ease-in-out infinite alternate;
  }
  @keyframes strokeWave {
    0% { opacity: .85; transform: translateY(0) scaleX(.98); }
    50% { opacity: 1; transform: translateY(0) scaleX(1.02); }
    100% { opacity: .9; transform: translateY(0) scaleX(1); }
  }
  header.nav.hide { transform: translateY(calc(-1 * var(--logo-h) - 28px)); }
  @keyframes navIn { 
    0% { 
      opacity: 0; 
      transform: translateY(-40px) scale(0.9) rotateX(15deg); 
      filter: blur(10px) brightness(0.7); 
      backdrop-filter: blur(0px);
    } 
    30% { 
      opacity: 0.6; 
      transform: translateY(-8px) scale(0.98) rotateX(5deg); 
      filter: blur(4px) brightness(0.9); 
      backdrop-filter: blur(4px);
    }
    70% { 
      opacity: 0.9; 
      transform: translateY(2px) scale(1.02) rotateX(-2deg); 
      filter: blur(1px) brightness(1.05); 
      backdrop-filter: blur(8px);
    } 
    100% { 
      opacity: 1; 
      transform: translateY(0) scale(1) rotateX(0deg); 
      filter: blur(0px) brightness(1); 
      backdrop-filter: blur(12px);
    } 
  }
  
  /* Enhanced entrance with staggered elements */
  header.nav.enter { 
    animation: navIn 1s cubic-bezier(0.34, 1.56, 0.64, 1) both; 
    animation-delay: 0.2s; 
  }
  
  /* Staggered animation for navbar elements */
  header.nav.enter .brand {
    animation: brandSlideIn 0.8s cubic-bezier(0.34, 1.56, 0.64, 1) both;
    animation-delay: 0.4s;
  }
  
  header.nav.enter .menu li {
    animation: menuItemSlideIn 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) both;
  }
  
  header.nav.enter .menu li:nth-child(2) { animation-delay: 0.6s; }
  header.nav.enter .menu li:nth-child(3) { animation-delay: 0.7s; }
  header.nav.enter .menu li:nth-child(4) { animation-delay: 0.8s; }
  header.nav.enter .menu li:nth-child(5) { animation-delay: 0.9s; }
  
  header.nav.enter .actions {
    animation: actionsSlideIn 0.7s cubic-bezier(0.34, 1.56, 0.64, 1) both;
    animation-delay: 1s;
  }
  
  @keyframes brandSlideIn {
    0% {
      opacity: 0;
      transform: translateX(-30px) scale(0.8) rotate(-5deg);
      filter: blur(4px);
    }
    100% {
      opacity: 1;
      transform: translateX(0) scale(1) rotate(0deg);
      filter: blur(0px);
    }
  }
  
  @keyframes menuItemSlideIn {
    0% {
      opacity: 0;
      transform: translateY(-20px) scale(0.9);
      filter: blur(3px);
    }
    60% {
      opacity: 0.8;
      transform: translateY(2px) scale(1.05);
      filter: blur(1px);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
      filter: blur(0px);
    }
  }
  
  @keyframes actionsSlideIn {
    0% {
      opacity: 0;
      transform: translateX(30px) scale(0.85);
      filter: blur(4px);
    }
    50% {
      opacity: 0.7;
      transform: translateX(-2px) scale(1.02);
      filter: blur(2px);
    }
    100% {
      opacity: 1;
      transform: translateX(0) scale(1);
      filter: blur(0px);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    header.nav.enter { animation: none; opacity: 1; transform: none; filter: none; }
  }

  .container {
    max-width: 1100px;
    margin-inline: auto;
    padding: 4px 16px;
    display: flex;
    align-items: center;
    gap: 6px;
    /* Ensure proper positioning for desktop */
    justify-content: flex-start;
  }

  /* Desktop-specific adjustments for logo positioning */
  @media (min-width: 769px) {
    header.nav {
      margin: 0;
      padding: 0;
    }
    .container {
      padding-left: 20px; /* Add some left padding for logo */
      padding-right: 20px; /* Add some right padding for buttons */
      justify-content: space-between; /* Logo left, nav center, actions right */
      margin-left: 0;
      max-width: 1200px; /* Set reasonable max-width */
      width: 100%;
      margin: 0 auto; /* Center the container */
    }
    .brand {
      padding: 0;
      margin: 0;
      flex-shrink: 0; /* Prevent logo from shrinking */
    }
    nav.primary {
      flex: 1; /* Take up available space */
      display: flex;
      justify-content: center; /* Center the navigation menu */
    }
    ul.menu {
      justify-content: center; /* Center menu items within nav */
      margin: 0 auto; /* Center the menu list */
    }
    .actions {
      flex-shrink: 0; /* Prevent buttons from shrinking */
      margin-left: 0; /* Remove left margin */
    }
  }

  .brand {
    display: inline-flex;
    align-items: center;
    gap: 0;
    color: var(--brand-blue);
    font-weight: 800;
    font-size: 14px;
    text-decoration: none;
    letter-spacing: .2px;
    white-space: nowrap;
    /* Ensure logo stays at top-left corner for desktop */
    flex-shrink: 0;
    order: -1; /* Ensure it comes first in flex layout */
  }
  .brand img {
    height: var(--logo-h);
    width: auto;
    display: block;
    vertical-align: middle;
    transform: translateY(var(--logo-shift)) scale(var(--logo-scale));
    transition: transform .3s cubic-bezier(.34,1.56,.64,1), filter .3s ease;
    will-change: transform;
  }
  .brand:hover img { 
    transform: translateY(var(--logo-shift)) scale(calc(var(--logo-scale) * 1.03)) rotate(-1deg); 
    filter: drop-shadow(0 6px 16px rgba(0,17,81,.12)) drop-shadow(0 2px 8px rgba(253,87,1,.08)); 
  }

  nav.primary {
    margin-left: auto;
  }
  /* Flexible spacer to create breathing room like the reference */
  .spacer { flex: 1 1 auto; }
  ul.menu {
    list-style: none;
    display: flex;
    align-items: center;
    gap: 14px;
    margin: 0;
    padding: 0;
    position: relative; /* anchor for active pill */
  }
  .menu a {
    color: var(--brand-blue);
    text-decoration: none;
    font-weight: 600;
    font-size: 12px;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    line-height: 1;
    border-radius: 12px;
    transition: color .25s cubic-bezier(.34,1.56,.64,1), background-color .3s ease, box-shadow .3s ease, transform .25s ease;
    position: relative;
    will-change: transform;
  }
  .menu a:not(.btn):hover {
    color: #000b3a;
    transform: translateY(-2px);
  }
  .menu a:not(.btn)::before { 
    content: ""; 
    position: absolute; 
    inset: 0; 
    border-radius: 10px; 
    background: linear-gradient(135deg, rgba(0,17,81,.03), rgba(253,87,1,.03));
    opacity: 0; 
    transition: opacity .3s ease; 
  }
  .menu a:not(.btn):hover::before { opacity: 1; }
  .menu a:not(.btn)::after { 
    content: ""; 
    position: absolute; 
    left: 12px; 
    right: 12px; 
    bottom: 6px; 
    height: 2px; 
    background: linear-gradient(90deg, var(--brand-blue), var(--brand-orange));
    opacity: 0; 
    transform: scaleX(0); 
    transform-origin: left; 
    transition: transform .35s cubic-bezier(.34,1.56,.64,1), opacity .3s ease; 
  }
  .menu a:not(.btn):hover::after { opacity: 1; transform: scaleX(1); }
  .menu a:not(.btn).active {
    background: linear-gradient(135deg, rgba(253,87,1,0.14), rgba(253,87,1,0.10));
    color: var(--brand-orange);
    box-shadow: 0 4px 12px rgba(253,87,1,0.18), 0 2px 6px rgba(0,17,81,0.06);
    transform: translateY(-1px);
  }
  .menu a:not(.btn).active::after { opacity: 0; }

  /* Moving active pill highlight */
  .active-pill {
    position: absolute;
    top: 0; left: 0;
    width: 0; height: 0;
    border-radius: 10px;
    background: rgba(253,87,1,0.12);
    box-shadow: 0 8px 24px rgba(253,87,1,.18);
    pointer-events: none;
    z-index: -1; /* sits behind links */
  }
  .caret {
    width: 13px;
    height: 13px;
    fill: currentColor;
    opacity: .8;
    transition: transform .3s cubic-bezier(.34,1.56,.64,1), opacity .3s ease;
  }
  .menu a:hover .caret { transform: translateY(2px); opacity: 1; }

  /* Auth buttons */
  .actions {
    margin-left: 12px;
    display: flex;
    align-items: center;
    gap: 8px;
    /* Reserve fixed space so longer buttons don't shift the menu */
    flex: 0 0 240px; /* basis width */
    justify-content: flex-end; /* extend to the right inside reserved space */
  }
  /* Search icon button (desktop only) */
  .search {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 26px; height: 26px;
    border-radius: 10px;
    border: 0;
    background: rgba(0,17,81,.06);
    color: var(--brand-blue);
    transition: background-color .2s ease, transform .2s ease, box-shadow .25s ease;
  }
  .search:hover { background: rgba(0,17,81,.10); transform: translateY(-1px); box-shadow: 0 6px 14px rgba(0,17,81,.10); }
  .search:active { transform: scale(.95); }
  .search svg { width: 14px; height: 14px; }
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 32px;
    padding: 0 14px;
    border-radius: 10px;
    font-weight: 700;
    font-size: 12px;
    text-decoration: none;
    transition: transform .18s cubic-bezier(.34,1.56,.64,1), box-shadow .25s ease, background-color .25s ease, color .2s ease;
    will-change: transform;
    position: relative;
    overflow: hidden;
  }
  .btn:hover { transform: translateY(-1px); }
  .btn:active { transform: translateY(0) scale(.985); }
  .btn:focus-visible { outline: 2px solid rgba(0,17,81,.28); outline-offset: 2px; }
  .btn::after {
    content: "";
    position: absolute;
    left: -40%; top: 0; bottom: 0;
    width: 40%;
    background: linear-gradient(120deg, transparent, rgba(255,255,255,.35), transparent);
    transform: skewX(-18deg) translateX(-120%);
    transition: transform .6s cubic-bezier(.34,1.56,.64,1);
    pointer-events: none;
  }
  .btn:hover::after { transform: skewX(-18deg) translateX(260%); }
  .btn--ghost { color: var(--brand-blue); background: rgba(0,17,81,.06); box-shadow: inset 0 0 0 1px rgba(0,17,81,.10); min-width: 85px; }
  .btn--ghost:hover { background: rgba(0,17,81,.10); box-shadow: inset 0 0 0 1px rgba(0,17,81,.18); }
  .btn--primary { color: #fff; background: var(--brand-orange); box-shadow: 0 8px 20px rgba(253,87,1,.22), 0 2px 6px rgba(0,0,0,.06); min-width: 90px; }
  .btn--primary:hover { color: #fff; box-shadow: 0 12px 28px rgba(253,87,1,.30), 0 4px 10px rgba(0,0,0,.08); filter: saturate(1.05); }
  .btn--primary:focus, .btn--primary:focus-visible, .btn--primary:visited { color: #fff; }

  /* Toggle button (only mobile element left in navbar) */
  .toggle {
    margin-left: auto;
    display: none;
    background: transparent;
    border: 0;
    padding: 8px;
    border-radius: 8px;
    color: var(--brand-blue);
    transition: transform .25s ease, background-color .25s ease;
    cursor: pointer;
  }

  .toggle:hover { 
    background: rgba(0,17,81,.06); 
    transform: scale(1.05); 
  }

  .toggle:active { 
    transform: scale(.95); 
  }

  .toggle svg { 
    width: 28px; 
    height: 28px; 
  }

  @media (max-width: 1024px) {
    nav.primary, .actions { 
      display: none; 
    }
    
    .toggle { 
      display: inline-flex; 
    }
  }

  @media (max-width: 480px) {
    .container { 
      padding: 8px 12px; 
      gap: 8px; 
    }
    
    .toggle { 
      padding: 6px; 
    }
    
    .toggle svg { 
      width: 24px; 
      height: 24px; 
    }
    
    header.nav { 
      --logo-h: clamp(32px, 12vw, 44px);
    }
  }

  /* Top scroll progress bar */
  #navProgress {
    position: fixed;
    top: 0;
    left: 0;
    height: 3px;
    background: linear-gradient(90deg, #FD5701, #001151);
    width: 0;
    z-index: 59;
    transform-origin: left center;
  }

  /* Mobile menu styles */
  .mobile-menu-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 9998;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .mobile-menu-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Mobile Menu Container */
  .mobile-menu-container {
    position: fixed;
    top: 0;
    right: -100%;
    width: 85%;
    max-width: 400px;
    height: 100%;
    background: white;
    box-shadow: -8px 0 32px rgba(0, 0, 0, 0.15);
    z-index: 9999;
    transition: right 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    display: flex;
    flex-direction: column;
  }

  .mobile-menu-container.active {
    right: 0;
  }

  .mobile-menu-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 16px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .mobile-menu-header .brand {
    display: inline-flex;
    align-items: center;
    gap: 0;
    color: var(--brand-blue);
    font-weight: 800;
    font-size: 20px;
    text-decoration: none;
    letter-spacing: .2px;
    white-space: nowrap;
  }

  .mobile-menu-header .brand img {
    height: 40px;
    width: auto;
    display: block;
    vertical-align: middle;
  }

  .mobile-menu-close {
    background: transparent;
    border: 0;
    padding: 8px;
    border-radius: 8px;
    color: var(--brand-blue);
    transition: transform .25s ease, background-color .25s ease;
    cursor: pointer;
    font-size: 24px;
  }

  .mobile-menu-close:hover {
    background: rgba(0,17,81,.06);
    transform: scale(1.05);
  }

  .mobile-menu-close:active {
    transform: scale(.95);
  }

  .mobile-menu-content {
    padding: 16px;
    flex: 1;
    overflow-y: auto;
  }

  .mobile-menu-items {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .mobile-menu-item {
    margin-bottom: 16px;
  }

  .mobile-menu-link {
    color: var(--brand-blue);
    text-decoration: none;
    font-weight: 600;
    font-size: 15px;
    display: inline-flex;
    align-items: center;
    gap: 7px;
    padding: 10px 12px;
    line-height: 1;
    border-radius: 12px;
    transition: color .25s cubic-bezier(.34,1.56,.64,1), background-color .3s ease, box-shadow .3s ease, transform .25s ease;
    position: relative;
    will-change: transform;
  }

  .mobile-menu-link:hover {
    color: #000b3a;
    transform: translateY(-2px);
  }

  .mobile-menu-actions {
    padding: 16px 16px 20px 16px;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  .mobile-menu-actions .btn { width: 100%; height: 48px; border-radius: 14px; }
  .mobile-menu-actions .btn--ghost { background: rgba(0,17,81,.06); box-shadow: inset 0 0 0 1px rgba(0,17,81,.10); }
  .mobile-menu-actions .btn--primary { background: linear-gradient(135deg, #FD5701, #ff7a33); box-shadow: 0 10px 24px rgba(253,87,1,.28), 0 3px 8px rgba(0,0,0,.08); }
  .mobile-menu-actions .btn--primary:hover { filter: saturate(1.06); }

  /* Numbered, bold mobile menu style */
  .mobile-menu-content { padding: 18px 14px; }
  .mobile-menu-items[data-numbering] { counter-reset: menucount; }
  .mobile-menu-items[data-numbering] .mobile-menu-item {
    position: relative;
    counter-increment: menucount;
    margin-bottom: 14px;
    padding-right: 40px; /* leave room for the number */
    min-height: 48px;
  }
  .mobile-menu-items[data-numbering] .mobile-menu-item::after {
    content: counter(menucount, decimal-leading-zero);
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    font-size: 11px;
    font-weight: 700;
    line-height: 1;
    color: #5227FF;
    opacity: .9;
  }
  .mobile-menu-items[data-numbering] .mobile-menu-link {
    display: block;
    padding: 0;
    border-radius: 0;
    text-transform: uppercase;
    font-weight: 800;
    font-size: clamp(26px, 7.5vw, 38px);
    letter-spacing: .5px;
    white-space: nowrap; /* keep single line e.g. RUMAH UMKM */
    overflow: hidden;
  }
  .mobile-menu-label { display: inline-block; will-change: transform, opacity; }
  .mobile-menu-item .mobile-menu-label { transition: opacity .25s ease, transform .25s ease; }
  .mobile-menu-item.mm-active .mobile-menu-label { opacity: .18; transform: translateY(-2px); }
  .mobile-menu-items[data-numbering] .mobile-menu-link:hover {
    background: transparent;
    transform: none;
    color: #000;
  }

  /* FlowingMenu-like marquee overlay for each mobile item */
  .mobile-menu-item { isolation: isolate; }
  .mm-marquee {
    position: absolute;
    left: 0;
    right: 40px; /* avoid overlapping the number */
    top: 50%;
    transform: translateY(-50%);
    overflow: hidden;
    height: 42px;
    background: #fff;
    border-radius: 9999px;
    padding: 6px 12px;
    box-shadow: 0 8px 18px rgba(0,0,0,.08);
    opacity: 0;
    pointer-events: none;
    z-index: 1;
    /* subtle edge fade */
    -webkit-mask-image: linear-gradient(90deg, transparent 0, #000 24px, #000 calc(100% - 24px), transparent 100%);
            mask-image: linear-gradient(90deg, transparent 0, #000 24px, #000 calc(100% - 24px), transparent 100%);
  }
  .mm-marquee-inner-wrap { position: relative; pointer-events: none; }
  .mm-marquee-inner {
    display: flex;
    gap: 16px;
    font-weight: 800;
    text-transform: uppercase;
    opacity: .9;
    color: var(--brand-blue);
    padding: 0;
    will-change: transform;
    align-items: center;
    font-size: 14px;
    letter-spacing: .4px;
  }
  .mm-marquee span { white-space: nowrap; }
  /* quick visual on hover for non-JS fallback */
  .mobile-menu-item:hover .mm-marquee { opacity: .999; }

  /* Focus state polish */
  .mobile-menu-items.mm-has-active .mobile-menu-item:not(.mm-active) { opacity: .55; transition: opacity .2s ease; }
  .mobile-menu-item.mm-active::after { opacity: .9; }
</style>

<header class="nav" id="lp-nav">
  <div class="container">
    <a class="brand" href="/">
      <img src="/LogoNavbar.png" alt="Brand Logo" loading="eager" decoding="async" />
    </a>

    <!-- Desktop Navigation -->
    <nav class="primary" aria-label="Primary Navigation">
      <ul class="menu">
        <li><a href="#beranda" class="active">Beranda</a></li>
        <li><a href="/etalase">Etalase</a></li>
        <li><a href="#rumah-umkm">Rumah UMKM</a></li>
        <li><a href="#konsultasi">Konsultasi</a></li>
        <li><a href="#komunitas">Komunitas</a></li>
        <!-- Mobile-only actions inside the menu -->
        <li class="actions-mobile">
          <a class="btn btn--ghost" href="/login">Masuk</a>
          <a class="btn btn--primary" href="/register">Daftar</a>
        </li>
      </ul>
    </nav>

    <!-- Desktop Actions -->
    <div class="actions">
      <a class="btn btn--ghost" href="/masuk">Masuk</a>
      <a class="btn btn--primary" href="/daftar">Daftar</a>
    </div>

    <!-- Mobile Toggle Button -->
    <button class="toggle" aria-label="Toggle mobile menu" id="navToggle">
      <svg viewBox="0 0 24 24" aria-hidden="true">
        <path d="M3 6h18M3 12h18M3 18h18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>
  </div>
</header>

<!-- External Mobile Menu (completely separate from navbar) -->
<div class="mobile-menu-overlay" id="mobileMenuOverlay"></div>
<div class="mobile-menu-container" id="mobileMenuContainer">
  <div class="mobile-menu-header">
    <a class="brand" href="/">
      <img src="/LogoNavbar.png" alt="Brand Logo" style="height: 40px;" />
    </a>
    <button class="mobile-menu-close" id="mobileMenuClose" aria-label="Close menu">
      ✕
    </button>
  </div>

  <div class="mobile-menu-content">
    <ul class="mobile-menu-items" data-numbering="true">
      <li class="mobile-menu-item" data-mm-text="Beranda">
        <a href="#beranda" class="mobile-menu-link"><span class="mobile-menu-label">Beranda</span></a>
        <div class="mm-marquee"><div class="mm-marquee-inner-wrap"><div class="mm-marquee-inner" aria-hidden="true"></div></div></div>
      </li>
      <li class="mobile-menu-item" data-mm-text="Etalase">
        <a href="#etalase" class="mobile-menu-link"><span class="mobile-menu-label">Etalase</span></a>
        <div class="mm-marquee"><div class="mm-marquee-inner-wrap"><div class="mm-marquee-inner" aria-hidden="true"></div></div></div>
      </li>
      <li class="mobile-menu-item" data-mm-text="Rumah UMKM">
        <a href="#rumah-umkm" class="mobile-menu-link"><span class="mobile-menu-label">Rumah UMKM</span></a>
        <div class="mm-marquee"><div class="mm-marquee-inner-wrap"><div class="mm-marquee-inner" aria-hidden="true"></div></div></div>
      </li>
    </ul>
  </div>

  <div class="mobile-menu-actions">
    <a class="btn btn--ghost" href="/masuk">Masuk</a>
    <a class="btn btn--primary" href="/daftar">Daftar</a>
  </div>
</div>

<script>
  // Mobile Menu Functions
  function openMobileMenu() {
    const menu = document.getElementById('mobileMenuContainer');
    const overlay = document.getElementById('mobileMenuOverlay');
    if (menu && overlay) {
      menu.classList.add('active');
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeMobileMenu() {
    const menu = document.getElementById('mobileMenuContainer');
    const overlay = document.getElementById('mobileMenuOverlay');
    if (menu && overlay) {
      menu.classList.remove('active');
      overlay.classList.remove('active');
      document.body.style.overflow = '';
    }
  }

  // Initialize event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('navToggle');
    const close = document.getElementById('mobileMenuClose');
    const overlay = document.getElementById('mobileMenuOverlay');
    
    if (toggle) toggle.addEventListener('click', openMobileMenu);
    if (close) close.addEventListener('click', closeMobileMenu);
    if (overlay) overlay.addEventListener('click', closeMobileMenu);

    // Close on link click
    document.querySelectorAll('.mobile-menu-link').forEach(a => {
      a.addEventListener('click', closeMobileMenu);
    });
  });
</script>

<script type="module">
  import gsap from 'https://cdn.jsdelivr.net/npm/gsap@3.12.5/index.js';
  import ScrollTrigger from 'https://cdn.jsdelivr.net/npm/gsap@3.12.5/ScrollTrigger.min.js';
  gsap.registerPlugin(ScrollTrigger);

  const header = document.getElementById('lp-nav');
  const btn = document.getElementById('navToggle');
  const mobileMenuContainer = document.getElementById('mobileMenuContainer');

  function animateMobileMenuIn() {
    try {
      const labels = Array.from(document.querySelectorAll('#mobileMenuContainer .mobile-menu-item .mobile-menu-label'));
      if (!labels.length) return;
      const content = document.querySelector('#mobileMenuContainer .mobile-menu-content');
      const tl = gsap.timeline({ defaults: { ease: 'expo.out' } });
      if (content) {
        tl.fromTo(
          content,
          { opacity: 0, y: 10 },
          { opacity: 1, y: 0, duration: 0.48, ease: 'power2.out' }
        );
      }
      // Prepare each label
      labels.forEach(el => gsap.set(el, { y: 32, opacity: 0, skewY: 8, rotate: 0.4, filter: 'blur(8px)', scale: 0.985 }));
      // Animate strictly in order, one after another with gentle cadence
      labels.forEach((el, i) => {
        tl.to(el, {
          y: 0,
          opacity: 1,
          skewY: 0,
          rotate: 0,
          filter: 'blur(0px)',
          scale: 1,
          duration: 0.85
        }, (content ? 0.05 : 0) + i * 0.12);
      });
      // Animate action buttons after labels
      const buttons = Array.from(document.querySelectorAll('#mobileMenuContainer .mobile-menu-actions .btn'));
      if (buttons.length) {
        gsap.set(buttons, { y: 12, opacity: 0 });
        tl.to(buttons, { y: 0, opacity: 1, duration: 0.38, ease: 'power2.out', stagger: 0.08 }, "+=0.05");
      }
    } catch {}
  }

  // Observe mobile menu open state to trigger animation
  if (mobileMenuContainer) {
    // FlowingMenu-like marquee setup
    function findClosestEdge(mouseX, mouseY, width, height) {
      const dx = mouseX - width / 2;
      const top = dx * dx + Math.pow(mouseY - 0, 2);
      const bottom = dx * dx + Math.pow(mouseY - height, 2);
      return top < bottom ? 'top' : 'bottom';
    }
    function getXYWithin(el, ev) {
      const r = el.getBoundingClientRect();
      const pt = ev.touches && ev.touches[0] ? ev.touches[0] : ev;
      return { x: pt.clientX - r.left, y: pt.clientY - r.top, w: r.width, h: r.height };
    }
    const marqueeTweenMap = new WeakMap();

    function prepareMarquee(item) {
      const marquee = item.querySelector('.mm-marquee');
      const inner = item.querySelector('.mm-marquee-inner');
      const label = item.querySelector('.mobile-menu-label');
      if (!marquee || !inner) return;
      const text = item.getAttribute('data-mm-text') || (label ? label.textContent : '').trim();
      inner.innerHTML = '';
      for (let i = 0; i < 4; i++) {
        const span = document.createElement('span');
        span.textContent = text;
        inner.appendChild(span);
      }
      const h = label ? Math.max(28, Math.round(label.getBoundingClientRect().height)) : 32;
      marquee.style.height = h + 'px';
      gsap.set(marquee, { y: '101%' });
      gsap.set(inner, { y: '-101%', x: 0 });

      const list = item.closest('.mobile-menu-items');
      const startScroll = () => {
        const existing = marqueeTweenMap.get(inner);
        existing?.kill();
        // Ensure content is wide enough
        const totalW = inner.scrollWidth || 600;
        const distance = Math.max(300, totalW / 2);
        const dur = Math.min(16, Math.max(6, distance / 80));
        const tween = gsap.to(inner, {
          x: -distance,
          duration: dur,
          ease: 'none',
          repeat: -1,
          modifiers: {
            x: (x) => {
              const n = parseFloat(x);
              const wrapAt = -distance;
              return (n <= wrapAt ? 0 : n) + 'px';
            }
          }
        });
        marqueeTweenMap.set(inner, tween);
      };
      const stopScroll = () => {
        const tw = marqueeTweenMap.get(inner);
        if (tw) { tw.kill(); marqueeTweenMap.delete(inner); }
        gsap.set(inner, { x: 0 });
      };
      const enter = (ev) => {
        const { x, y, w, h } = getXYWithin(item, ev);
        const edge = findClosestEdge(x, y, w, h);
        item.classList.add('mm-active');
        if (list) list.classList.add('mm-has-active');
        gsap.timeline({ defaults: { ease: 'expo.out' } })
          .set(marquee, { y: edge === 'top' ? '-101%' : '101%' }, 0)
          .set(inner, { y: edge === 'top' ? '101%' : '-101%' }, 0)
          .to(marquee, { y: '0%', opacity: 1, duration: 0.36 }, 0)
          .to(inner, { y: '0%' , duration: 0.36 }, 0)
          .fromTo(marquee, { scale: .98 }, { scale: 1, duration: 0.35, ease: 'power2.out' }, 0)
          .to(item.querySelector('.mobile-menu-label'), { opacity: 0.18, y: -2, duration: 0.25, ease: 'power2.out' }, 0)
          .add(() => startScroll(), '-=0.1');
      };
      const leave = (ev) => {
        const { x, y, w, h } = getXYWithin(item, ev);
        const edge = findClosestEdge(x, y, w, h);
        gsap.timeline({ defaults: { duration: 0.5, ease: 'expo.inOut' } })
          .add(() => stopScroll(), 0)
          .to(marquee, { opacity: 0, y: edge === 'top' ? '-101%' : '101%' }, 0)
          .to(inner, { y: edge === 'top' ? '101%' : '-101%' }, 0)
          .to(item.querySelector('.mobile-menu-label'), { opacity: 1, y: 0, duration: 0.25, ease: 'power2.out' }, 0)
          .add(() => { item.classList.remove('mm-active'); if (list) list.classList.remove('mm-has-active'); }, "+=0.01");
      };
      item.addEventListener('pointerenter', enter);
      item.addEventListener('pointerleave', leave);
      item.addEventListener('touchstart', (e) => { enter(e); setTimeout(() => leave(e), 350); }, { passive: true });
    }
    function initMarquees() {
      const items = Array.from(document.querySelectorAll('#mobileMenuContainer .mobile-menu-item'));
      items.forEach(prepareMarquee);
    }
    const mo = new MutationObserver((entries) => {
      for (const en of entries) {
        if (en.type === 'attributes' && en.attributeName === 'class') {
          if (mobileMenuContainer.classList.contains('active')) {
            animateMobileMenuIn();
            initMarquees();
          }
        }
      }
    });
    mo.observe(mobileMenuContainer, { attributes: true, attributeFilter: ['class'] });
    window.addEventListener('resize', () => {
      if (!mobileMenuContainer.classList.contains('active')) return;
      const items = Array.from(document.querySelectorAll('#mobileMenuContainer .mobile-menu-item'));
      items.forEach((item) => {
        const label = item.querySelector('.mobile-menu-label');
        const marquee = item.querySelector('.mm-marquee');
        if (label && marquee) marquee.style.height = Math.max(28, Math.round(label.getBoundingClientRect().height)) + 'px';
      });
    });
  }
  let introDone = false; // one-time gate after intro completes
  // Detect if an intro overlay is active in the page
  function isIntroActive() {
    if (document.documentElement.classList.contains('intro-lock') || document.body.classList.contains('intro-lock')) return true;
    if (document.documentElement.classList.contains('intro-active') || document.body.classList.contains('intro-active')) return true;
    const introEl = document.querySelector('#intro, .intro, .intro-overlay');
    if (!introEl) return false;
    // visible if not hidden and has layout box
    const style = window.getComputedStyle(introEl);
    const hidden = introEl.hasAttribute('hidden') || style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0';
    return !hidden;
  }

  function applyIntroVisibility() {
    if (!header) return;
    const introSeen = document.cookie.split('; ').find(row => row.startsWith('introSeen='));
    const isFirstVisit = !introSeen;
    const active = isIntroActive();
    if (active && isFirstVisit) {
      header.style.opacity = '0';
      header.style.visibility = 'hidden';
      header.style.pointerEvents = 'none';
      introDone = false; // reset if intro shows again
    } else {
      header.style.opacity = '';
      header.style.visibility = '';
      header.style.pointerEvents = '';
      // add entrance only once when intro finished or not shown
      if (!header.classList.contains('enter')) {
        // Add slight delay for dramatic effect
        setTimeout(() => {
          header.classList.add('enter');
        }, 100);
      }
      // show idle stroke immediately after intro ends or if no intro
      header.classList.add('idle');
      if (!introDone) {
        introDone = true;
        // Set flag that intro has been seen after it ends
        if (isFirstVisit) {
          // Cookie is now set in the layout script
        }
        // Kick ScrollTrigger to compute positions after intro removed
        if (typeof ScrollTrigger !== 'undefined') {
          try { ScrollTrigger.refresh(true); } catch {}
        }
        // Initialize scrolled state based on current position
        const y = window.scrollY || document.documentElement.scrollTop || 0;
        if (y > 8) header.classList.add('scrolled'); else header.classList.remove('scrolled');
      }
    }
  }
  applyIntroVisibility();

  // Observe intro element/class changes to keep navbar hidden until intro ends
  const introEl = document.querySelector('#intro, .intro, .intro-overlay');
  if (introEl) {
    const mo = new MutationObserver(applyIntroVisibility);
    mo.observe(introEl, { attributes: true, attributeFilter: ['class','style','hidden','aria-hidden'] });
  }
  window.addEventListener('load', applyIntroVisibility);

  // Toggle mobile menu
  if (btn && header) {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      if (isIntroActive()) return;
      const mobileMenuOverlay = document.getElementById('mobileMenuOverlay');
      const mobileMenuContainer = document.getElementById('mobileMenuContainer');
      mobileMenuOverlay.style.display = 'block';
      mobileMenuContainer.style.display = 'block';
    });
  }

  function animatePillTo(el) {
    const pill = document.getElementById('activePill');
    if (!pill || !el) return;
    const menu = pill.parentElement;
    const er = el.getBoundingClientRect();
    const mr = menu.getBoundingClientRect();
    const x = er.left - mr.left;
    const y = er.top - mr.top;
    gsap.to(pill, { x, y, width: er.width, height: er.height, duration: 0.35, ease: 'power3.out' });
  }

  // Initialize pill on first paint
  const firstActive = document.querySelector('.menu a.active');
  if (firstActive) {
    // place instantly then animate slight pop
    const pill = document.getElementById('activePill');
    if (pill) {
      const r = firstActive.getBoundingClientRect();
      const m = pill.parentElement.getBoundingClientRect();
      pill.style.transform = `translate(${r.left - m.left}px, ${r.top - m.top}px)`;
      pill.style.width = `${r.width}px`;
      pill.style.height = `${r.height}px`;
      gsap.fromTo(pill, { opacity: 0, scale: 0.98 }, { opacity: 1, scale: 1, duration: 0.28, ease: 'power2.out' });
    }
  }

  // Click interactions: set active, animate pill, micro-press, smooth scroll
  document.querySelectorAll('.menu a').forEach(a => {
    a.addEventListener('click', (e) => {
      const href = a.getAttribute('href') || '';
      console.log('Menu link clicked:', href);
      if (href.startsWith('#')) {
        e.preventDefault();
        const target = document.querySelector(href);
        if (target) {
          window.scrollTo({ top: target.getBoundingClientRect().top + window.scrollY - 80, behavior: 'smooth' });
        }
        // Close mobile menu after clicking link
        if (header.classList.contains('open')) {
          header.classList.remove('open');
        }
      }
      document.querySelectorAll('.menu a.active').forEach(n => n.classList.remove('active'));
      a.classList.add('active');
      if (typeof gsap !== 'undefined') {
        gsap.fromTo(a, { scale: 0.96 }, { scale: 1, duration: 0.18, ease: 'power2.out' });
      }
      animatePillTo(a);
    });
  });

  // Reposition pill on resize
  window.addEventListener('resize', () => {
    const current = document.querySelector('.menu a.active');
    if (current) animatePillTo(current);
  });

  if (header) {
    const hideAmount = () => (header.offsetHeight + 16) * -1;
    let scrollTimeout;
    let isHidden = false;
    const progress = document.getElementById('navProgress');

    ScrollTrigger.create({
      start: 0,
      end: ScrollTrigger.maxScroll(window),
      onUpdate(self) {
        const y = self.scroll();
        
        // Apply scrolled background when not at top
        if (y > 8) header.classList.add('scrolled'); 
        else header.classList.remove('scrolled');
        // Update progress bar
        if (progress && ScrollTrigger.maxScroll(window) > 0) {
          const pct = Math.min(1, Math.max(0, y / ScrollTrigger.maxScroll(window)));
          progress.style.width = `${pct * 100}%`;
        }
        
        // While scrolling, remove idle stroke and close mobile menu
        header.classList.remove('idle');
        if (header.classList.contains('open')) {
          header.classList.remove('open');
        }

        // Hide navbar on scroll down
        if (y > 24 && self.direction === 1) {
          gsap.to(header, { y: hideAmount(), duration: 0.32, ease: 'power2.out' });
          isHidden = true;
        } 
        // Show navbar on scroll up
        else if (self.direction === -1 && isHidden) {
          gsap.to(header, { y: 0, duration: 0.35, ease: 'power2.out' });
          isHidden = false;
        }
        
        // Clear previous timeout
        clearTimeout(scrollTimeout);
        
        // Show navbar after user stops scrolling for a short delay and apply idle stroke
        scrollTimeout = setTimeout(() => {
          if (isHidden) {
            gsap.to(header, { y: 0, duration: 0.4, ease: 'power2.out' });
            isHidden = false;
          }
          header.classList.add('idle');
        }, 250);
      }
    });
  }

  // Scrollspy: highlight menu item based on section in view
  try {
    const links = Array.from(document.querySelectorAll('.menu a[href^="#"]'));
    const sections = links
      .map(a => ({ a, id: a.getAttribute('href') }))
      .filter(x => x.id && x.id.length > 1)
      .map(x => ({ a: x.a, el: document.querySelector(x.id) }))
      .filter(x => x.el);
    if (sections.length) {
      const io = new IntersectionObserver((entries) => {
        entries.forEach(en => {
          if (en.isIntersecting) {
            const match = sections.find(s => s.el === en.target);
            if (match) {
              document.querySelectorAll('.menu a.active').forEach(n => n.classList.remove('active'));
              match.a.classList.add('active');
              animatePillTo(match.a);
            }
          }
        });
      }, { threshold: 0.4 });
      sections.forEach(s => io.observe(s.el));
    }
  } catch (_) {}
</script>