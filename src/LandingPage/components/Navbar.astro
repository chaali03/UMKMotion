---
// Simple, responsive navbar component for the landing page
// Uses brand colors and the provided logo at /LogoNavbar.png
---

<style>
  :root {
    --brand-blue: #001151;
    --brand-orange: #FD5701;
    --bg-soft: linear-gradient(180deg, rgba(0,17,81,0.02), rgba(253,87,1,0.02));
  }

  /* Hide navbar while intro is active */
  :global(html.intro-lock) header.nav,
  :global(body.intro-lock) header.nav,
  :global(html.intro-active) header.nav,
  :global(body.intro-active) header.nav {
    opacity: 0; 
    visibility: hidden; 
    pointer-events: none; 
  }
  /* Also disable entrance animation during intro to avoid flash */
  :global(html.intro-lock) header.nav.enter,
  :global(body.intro-lock) header.nav.enter,
  :global(html.intro-active) header.nav.enter,
  :global(body.intro-active) header.nav.enter { animation: none !important; }

  header.nav {
    position: sticky;
    top: 0;
    z-index: 60; /* below intro overlay (z-index: 50) when shown, but enough for content */
    background: transparent;
    --logo-h: clamp(48px, 9vw, 88px);
    --logo-shift: 10px;
    --logo-scale: 1.25; /* visually enlarge logo */
    transition: transform .4s cubic-bezier(.25,.8,.25,1), background-color .35s ease, box-shadow .35s ease, backdrop-filter .35s ease, opacity .2s ease;
    will-change: transform, background-color;
    /* create a stacking context for the stroke pseudo-element */
    isolation: isolate;
  }
  /* Bottom stroke that fades in when idle */
  header.nav::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 1px;
    background: linear-gradient(90deg, rgba(0,17,81,.14), rgba(0,17,81,.06));
    opacity: 0;
    transition: opacity .25s ease;
    pointer-events: none;
  }
  header.nav.scrolled { 
    background: linear-gradient(180deg, rgba(255,255,255,.85) 0%, rgba(255,255,255,.75) 100%);
    backdrop-filter: blur(12px) saturate(160%);
    -webkit-backdrop-filter: blur(12px) saturate(160%);
    box-shadow: 0 8px 32px rgba(0,17,81,.08), 0 2px 8px rgba(253,87,1,.04);
  }
  /* Idle stroke shown when user stops scrolling */
  header.nav.idle::after { 
    opacity: 1; 
    animation: strokeWave 2.4s ease-in-out infinite alternate;
  }
  @keyframes strokeWave {
    0% { opacity: .85; transform: translateY(0) scaleX(.98); }
    50% { opacity: 1; transform: translateY(0) scaleX(1.02); }
    100% { opacity: .9; transform: translateY(0) scaleX(1); }
  }
  header.nav.hide { transform: translateY(calc(-1 * var(--logo-h) - 28px)); }
  @keyframes navIn { 
    from { opacity: 0; transform: translateY(-12px) scale(.99); } 
    to { opacity: 1; transform: translateY(0) scale(1); } 
  }
  header.nav.enter { animation: navIn .35s cubic-bezier(.34,1.56,.64,1) both; }

  .container {
    max-width: 1100px;
    margin-inline: auto;
    padding: 12px 20px;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .brand {
    display: inline-flex;
    align-items: center;
    gap: 0;
    color: var(--brand-blue);
    font-weight: 800;
    font-size: 20px;
    text-decoration: none;
    letter-spacing: .2px;
    white-space: nowrap;
  }
  .brand img {
    height: var(--logo-h);
    width: auto;
    display: block;
    vertical-align: middle;
    transform: translateY(var(--logo-shift)) scale(var(--logo-scale));
    transition: transform .3s cubic-bezier(.34,1.56,.64,1), filter .3s ease;
    will-change: transform;
  }
  .brand:hover img { 
    transform: translateY(var(--logo-shift)) scale(calc(var(--logo-scale) * 1.03)) rotate(-1deg); 
    filter: drop-shadow(0 6px 16px rgba(0,17,81,.12)) drop-shadow(0 2px 8px rgba(253,87,1,.08)); 
  }

  nav.primary {
    margin-left: auto;
  }
  ul.menu {
    list-style: none;
    display: flex;
    align-items: center;
    gap: 20px;
    margin: 0;
    padding: 0;
    position: relative; /* anchor for active pill */
  }
  .menu a {
    color: var(--brand-blue);
    text-decoration: none;
    font-weight: 600;
    font-size: 15px;
    display: inline-flex;
    align-items: center;
    gap: 7px;
    padding: 10px 12px;
    line-height: 1;
    border-radius: 12px;
    transition: color .25s cubic-bezier(.34,1.56,.64,1), background-color .3s ease, box-shadow .3s ease, transform .25s ease;
    position: relative;
    will-change: transform;
  }
  .menu a:hover {
    color: #000b3a;
    transform: translateY(-2px);
  }
  .menu a::before { 
    content: ""; 
    position: absolute; 
    inset: 0; 
    border-radius: 10px; 
    background: linear-gradient(135deg, rgba(0,17,81,.03), rgba(253,87,1,.03));
    opacity: 0; 
    transition: opacity .3s ease; 
  }
  .menu a:hover::before { opacity: 1; }
  .menu a::after { 
    content: ""; 
    position: absolute; 
    left: 12px; 
    right: 12px; 
    bottom: 6px; 
    height: 2px; 
    background: linear-gradient(90deg, var(--brand-blue), var(--brand-orange));
    opacity: 0; 
    transform: scaleX(0); 
    transform-origin: left; 
    transition: transform .35s cubic-bezier(.34,1.56,.64,1), opacity .3s ease; 
  }
  .menu a:hover::after { opacity: 1; transform: scaleX(1); }
  .menu a.active {
    background: linear-gradient(135deg, rgba(253,87,1,0.14), rgba(253,87,1,0.10));
    color: var(--brand-orange);
    box-shadow: 0 4px 12px rgba(253,87,1,0.18), 0 2px 6px rgba(0,17,81,0.06);
    transform: translateY(-1px);
  }
  .menu a.active::after { opacity: 0; }

  /* Moving active pill highlight */
  .active-pill {
    position: absolute;
    top: 0; left: 0;
    width: 0; height: 0;
    border-radius: 10px;
    background: rgba(253,87,1,0.12);
    box-shadow: 0 8px 24px rgba(253,87,1,.18);
    pointer-events: none;
    z-index: -1; /* sits behind links */
  }
  .caret {
    width: 13px;
    height: 13px;
    fill: currentColor;
    opacity: .8;
    transition: transform .3s cubic-bezier(.34,1.56,.64,1), opacity .3s ease;
  }
  .menu a:hover .caret { transform: translateY(2px); opacity: 1; }

  /* Auth buttons */
  .actions {
    margin-left: 16px;
    display: flex;
    align-items: center;
    gap: 10px;
  }
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 40px;
    padding: 0 14px;
    border-radius: 12px;
    font-weight: 700;
    font-size: 14px;
    text-decoration: none;
    transition: transform .18s cubic-bezier(.34,1.56,.64,1), box-shadow .25s ease, background-color .25s ease, color .2s ease;
    will-change: transform;
    position: relative;
    overflow: hidden;
  }
  .btn:hover { transform: translateY(-1px); }
  .btn:active { transform: translateY(0) scale(.985); }
  .btn:focus-visible { outline: 2px solid rgba(0,17,81,.28); outline-offset: 2px; }
  .btn::after {
    content: "";
    position: absolute;
    left: -40%; top: 0; bottom: 0;
    width: 40%;
    background: linear-gradient(120deg, transparent, rgba(255,255,255,.35), transparent);
    transform: skewX(-18deg) translateX(-120%);
    transition: transform .6s cubic-bezier(.34,1.56,.64,1);
    pointer-events: none;
  }
  .btn:hover::after { transform: skewX(-18deg) translateX(260%); }
  .btn--ghost { color: var(--brand-blue); background: rgba(0,17,81,.06); box-shadow: inset 0 0 0 1px rgba(0,17,81,.10); }
  .btn--ghost:hover { background: rgba(0,17,81,.10); box-shadow: inset 0 0 0 1px rgba(0,17,81,.18); }
  .btn--primary { color: white; background: var(--brand-orange); box-shadow: 0 8px 20px rgba(253,87,1,.22), 0 2px 6px rgba(0,0,0,.06); }
  .btn--primary:hover { box-shadow: 0 12px 28px rgba(253,87,1,.30), 0 4px 10px rgba(0,0,0,.08); filter: saturate(1.05); }

  /* Hide mobile-only action row on desktop */
  .actions-mobile { display: none; }

  /* Mobile */
  .toggle {
    margin-left: auto;
    display: none;
    background: transparent;
    border: 0;
    padding: 8px;
    border-radius: 8px;
    color: var(--brand-blue);
    transition: transform .25s ease, background-color .25s ease;
  }
  .toggle:hover { background: rgba(0,17,81,.06); transform: scale(1.05); }
  .toggle:active { transform: scale(.95); }
  .toggle:focus-visible { outline: 2px solid rgba(0,17,81,.25); }
  .toggle svg { width: 28px; height: 28px; transition: transform .3s ease; }
  header.nav.open .toggle svg { transform: rotate(90deg); }

  @media (max-width: 768px) {
    nav.primary { 
      display: none; 
      opacity: 0;
      transform: translateY(-10px);
      transition: opacity .3s ease, transform .3s cubic-bezier(.34,1.56,.64,1);
    }
    header.nav.open nav.primary { 
      display: block; 
      opacity: 1;
      transform: translateY(0);
      position: fixed; 
      left: 0; right: 0; 
      top: var(--openTop, 64px); 
      background: rgba(255,255,255,.96); 
      backdrop-filter: blur(10px) saturate(140%);
      -webkit-backdrop-filter: blur(10px) saturate(140%);
      padding-bottom: 18px;
      z-index: 1002;
      box-shadow: 0 16px 40px rgba(0,0,0,.10);
      border-bottom-left-radius: 16px;
      border-bottom-right-radius: 16px;
    }
    .toggle { display: inline-flex; padding: 12px; border-radius: 12px; }
    .toggle svg { width: 34px; height: 34px; }

    .container { flex-wrap: wrap; }
    nav.primary { width: 100%; }
    ul.menu { 
      flex-direction: column; 
      align-items: flex-start; 
      gap: 12px; 
      padding: 14px 8px 12px; 
    }
    /* Desktop actions hidden on mobile */
    .actions { display: none; }
    /* Mobile actions appear inside menu */
    .actions-mobile { 
      display: flex; 
      gap: 10px; 
      width: 100%;
      padding-top: 6px;
    }
    .actions-mobile .btn { flex: 1 1 0; height: 48px; font-size: 15px; }
    /* Animate buttons when menu opens */
    header.nav.open .actions-mobile .btn { 
      animation: btnIn .35s cubic-bezier(.34,1.56,.64,1) both;
    }
    header.nav.open .actions-mobile .btn:nth-child(1) { animation-delay: .05s; }
    header.nav.open .actions-mobile .btn:nth-child(2) { animation-delay: .1s; }
    @keyframes btnIn { from { opacity: 0; transform: translateY(10px) scale(.98); } to { opacity: 1; transform: translateY(0) scale(1); } }
    .menu a { font-size: 18px; padding: 14px 16px; }
    .caret { width: 16px; height: 16px; }
    .menu li { 
      opacity: 0;
      animation: menuItemIn .4s ease forwards;
    }
    .menu li:nth-child(1) { animation-delay: .05s; }
    .menu li:nth-child(2) { animation-delay: .1s; }
    .menu li:nth-child(3) { animation-delay: .15s; }
    .menu li:nth-child(4) { animation-delay: .2s; }
    @keyframes menuItemIn {
      from { opacity: 0; transform: translateX(-12px); }
      to { opacity: 1; transform: translateX(0); }
    }
    header.nav { 
      --logo-h: clamp(52px, 14vw, 88px);
      --logo-shift: 8px;
      --logo-scale: 1.3;
    }
  }
</style>

<header class="nav" id="lp-nav">
  <div class="container">
    <a class="brand" href="/">
      <img src="/LogoNavbar.png" alt="Brand Logo" loading="eager" decoding="async" />
    </a>

    <button class="toggle" aria-label="Toggle navigation" id="navToggle">
      <svg viewBox="0 0 24 24" aria-hidden="true">
        <path d="M3 6h18M3 12h18M3 18h18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>

    <nav class="primary" aria-label="Primary">
      <ul class="menu">
        <span class="active-pill" id="activePill"></span>
        <li><a class="active" href="#beranda">Beranda</a></li>
        <li><a href="#etalase">Etalase</a></li>
        <li><a href="#rumah-umkm">Rumah UMKM</a></li>
        <li><a href="#konsultasi">Konsultasi</a></li>
        <li><a href="#komunitas">Komunitas</a></li>
        <!-- Mobile-only actions inside the menu -->
        <li class="actions-mobile">
          <a class="btn btn--ghost" href="/masuk">Masuk</a>
          <a class="btn btn--primary" href="/daftar">Daftar</a>
        </li>
      </ul>
    </nav>
    <!-- Desktop actions on the right -->
    <div class="actions">
      <a class="btn btn--ghost" href="/masuk">Masuk</a>
      <a class="btn btn--primary" href="/daftar">Daftar</a>
    </div>
  </div>
  <!-- Backdrop for mobile menu -->
  <div class="nav-backdrop" id="navBackdrop" aria-hidden="true"></div>
</header>

<script type="module">
  import gsap from 'https://cdn.jsdelivr.net/npm/gsap@3.12.5/index.js';
  import ScrollTrigger from 'https://cdn.jsdelivr.net/npm/gsap@3.12.5/ScrollTrigger.min.js';
  gsap.registerPlugin(ScrollTrigger);

  const header = document.getElementById('lp-nav');
  const btn = document.getElementById('navToggle');
  const backdrop = document.getElementById('navBackdrop');
  let introDone = false; // one-time gate after intro completes
  // Detect if an intro overlay is active in the page
  function isIntroActive() {
    if (document.documentElement.classList.contains('intro-lock') || document.body.classList.contains('intro-lock')) return true;
    if (document.documentElement.classList.contains('intro-active') || document.body.classList.contains('intro-active')) return true;
    const introEl = document.querySelector('#intro, .intro, .intro-overlay');
    if (!introEl) return false;
    // visible if not hidden and has layout box
    const style = window.getComputedStyle(introEl);
    const hidden = introEl.hasAttribute('hidden') || style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0';
    return !hidden;
  }

  function applyIntroVisibility() {
    if (!header) return;
    const active = isIntroActive();
    if (active) {
      header.style.opacity = '0';
      header.style.visibility = 'hidden';
      header.style.pointerEvents = 'none';
      introDone = false; // reset if intro shows again
    } else {
      header.style.opacity = '';
      header.style.visibility = '';
      header.style.pointerEvents = '';
      // add entrance only once when intro finished
      if (!header.classList.contains('enter')) header.classList.add('enter');
      // show idle stroke immediately after intro ends
      header.classList.add('idle');
      if (!introDone) {
        introDone = true;
        // Kick ScrollTrigger to compute positions after intro removed
        if (typeof ScrollTrigger !== 'undefined') {
          try { ScrollTrigger.refresh(true); } catch {}
        }
        // Initialize scrolled state based on current position
        const y = window.scrollY || document.documentElement.scrollTop || 0;
        if (y > 8) header.classList.add('scrolled'); else header.classList.remove('scrolled');
      }
    }
  }
  applyIntroVisibility();

  // Observe intro element/class changes to keep navbar hidden until intro ends
  const introEl = document.querySelector('#intro, .intro, .intro-overlay');
  if (introEl) {
    const mo = new MutationObserver(applyIntroVisibility);
    mo.observe(introEl, { attributes: true, attributeFilter: ['class','style','hidden','aria-hidden'] });
  }
  window.addEventListener('load', applyIntroVisibility);

  if (btn && header) {
    btn.addEventListener('click', () => {
      if (isIntroActive()) return; // block opening while intro active
      const isOpen = header.classList.toggle('open');
      if (isOpen) {
        // compute menu fixed top under header height
        const top = header.getBoundingClientRect().height;
        header.style.setProperty('--openTop', `${Math.round(top)}px`);
        backdrop?.classList.add('show');
      } else {
        backdrop?.classList.remove('show');
      }
    });
  }

  function animatePillTo(el) {
    const pill = document.getElementById('activePill');
    if (!pill || !el) return;
    const menu = pill.parentElement;
    const er = el.getBoundingClientRect();
    const mr = menu.getBoundingClientRect();
    const x = er.left - mr.left;
    const y = er.top - mr.top;
    gsap.to(pill, { x, y, width: er.width, height: er.height, duration: 0.35, ease: 'power3.out' });
  }

  // Initialize pill on first paint
  const firstActive = document.querySelector('.menu a.active');
  if (firstActive) {
    // place instantly then animate slight pop
    const pill = document.getElementById('activePill');
    if (pill) {
      const r = firstActive.getBoundingClientRect();
      const m = pill.parentElement.getBoundingClientRect();
      pill.style.transform = `translate(${r.left - m.left}px, ${r.top - m.top}px)`;
      pill.style.width = `${r.width}px`;
      pill.style.height = `${r.height}px`;
      gsap.fromTo(pill, { opacity: 0, scale: 0.98 }, { opacity: 1, scale: 1, duration: 0.28, ease: 'power2.out' });
    }
  }

  // Click interactions: set active, animate pill, micro-press, smooth scroll
  document.querySelectorAll('.menu a').forEach(a => {
    a.addEventListener('click', (e) => {
      const href = a.getAttribute('href') || '';
      if (href.startsWith('#')) {
        e.preventDefault();
        const target = document.querySelector(href);
        if (target) {
          window.scrollTo({ top: target.getBoundingClientRect().top + window.scrollY - 80, behavior: 'smooth' });
        }
      }
      document.querySelectorAll('.menu a.active').forEach(n => n.classList.remove('active'));
      a.classList.add('active');
      gsap.fromTo(a, { scale: 0.96 }, { scale: 1, duration: 0.18, ease: 'power2.out' });
      animatePillTo(a);
    });
  });

  // Reposition pill on resize
  window.addEventListener('resize', () => {
    const current = document.querySelector('.menu a.active');
    if (current) animatePillTo(current);
  });

  if (header) {
    const hideAmount = () => (header.offsetHeight + 16) * -1;
    let scrollTimeout;
    let isHidden = false;

    ScrollTrigger.create({
      start: 0,
      end: ScrollTrigger.maxScroll(window),
      onUpdate(self) {
        const y = self.scroll();
        
        // Apply scrolled background when not at top
        if (y > 8) header.classList.add('scrolled'); 
        else header.classList.remove('scrolled');
        
        // While scrolling, remove idle stroke and close mobile menu
        header.classList.remove('idle');
        if (header.classList.contains('open')) {
          header.classList.remove('open');
          backdrop?.classList.remove('show');
        }

        // Hide navbar on scroll down
        if (y > 24 && self.direction === 1) {
          gsap.to(header, { y: hideAmount(), duration: 0.32, ease: 'power2.out' });
          isHidden = true;
        } 
        // Show navbar on scroll up
        else if (self.direction === -1 && isHidden) {
          gsap.to(header, { y: 0, duration: 0.35, ease: 'power2.out' });
          isHidden = false;
        }
        
        // Clear previous timeout
        clearTimeout(scrollTimeout);
        
        // Show navbar after user stops scrolling for a short delay and apply idle stroke
        scrollTimeout = setTimeout(() => {
          if (isHidden) {
            gsap.to(header, { y: 0, duration: 0.4, ease: 'power2.out' });
            isHidden = false;
          }
          header.classList.add('idle');
        }, 250);
      }
    });
  }

  // Backdrop behavior
  if (backdrop && header) {
    backdrop.addEventListener('click', () => {
      header.classList.remove('open');
      backdrop.classList.remove('show');
    });
  }
</script>
