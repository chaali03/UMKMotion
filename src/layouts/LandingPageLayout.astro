---
import Navbar from '../LandingPage/components/Navbar.astro';
const { title = 'UMKMotion' } = Astro.props;
---
<html lang="en" class="intro-lock">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon_io/apple-touch-icon.png?v=4" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon_io/favicon-32x32.png?v=4" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon_io/favicon-16x16.png?v=4" />
    <link rel="icon" type="image/png" sizes="192x192" href="/favicon_io/android-chrome-192x192.png?v=4" />
    <link rel="icon" type="image/png" sizes="512x512" href="/favicon_io/android-chrome-512x512.png?v=4" />
    <link rel="manifest" href="/favicon_io/site.webmanifest?v=4" />
    <link rel="shortcut icon" href="/favicon_io/favicon.ico?v=4" />
    <style>
      :root { color-scheme: light dark; }
      body { margin: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif; overflow-x: hidden; }
      /* Lock scroll while intro visible */
      html.intro-lock, body.intro-lock { overflow: hidden; overscroll-behavior: none; height: 100%; }
      /* Hide scrollbars when locked */
      html.intro-lock::-webkit-scrollbar, body.intro-lock::-webkit-scrollbar { width: 0; height: 0; }
      html.intro-lock { scrollbar-width: none; }
      .app { min-height: 100dvh; display: grid; }
      
      /* Intro overlay with white background */
      .intro { 
        position: fixed; 
        inset: 0; 
        display: grid; 
        place-items: center; 
        z-index: 50; 
        overflow: hidden;
        background:
          radial-gradient(1400px 700px at 20% 20%, rgba(0,17,81,.06), transparent 70%),
          radial-gradient(1200px 600px at 80% 80%, rgba(253,87,1,.05), transparent 70%),
          #ffffff;
      }
      
      .intro__stage { 
        position: relative; 
        display: grid; 
        place-items: center;
        perspective: 1200px;
        padding: clamp(12px, 4vw, 24px);
      }
      
      /* Morphing circles (hidden) */
      .intro__circles {
        display: none !important;
      }
      
      .circle {
        position: absolute;
        border-radius: 50%;
        opacity: 0;
        filter: blur(2px);
      }
      
      .circle--1 {
        width: 300px;
        height: 300px;
        background: linear-gradient(135deg, rgba(14,165,233,.12), rgba(245,158,11,.12));
        top: 20%;
        left: 15%;
      }
      
      .circle--2 {
        width: 400px;
        height: 400px;
        background: linear-gradient(225deg, rgba(14,165,233,.10), rgba(245,158,11,.10));
        bottom: 15%;
        right: 10%;
      }
      
      .circle--3 {
        width: 250px;
        height: 250px;
        background: linear-gradient(45deg, rgba(245,158,11,.12), rgba(251,191,36,.12));
        top: 50%;
        right: 20%;
      }
      
      .intro__logoWrap { 
        position: relative;
        transform-style: preserve-3d;
      }
      
      .intro__logo { 
        width: clamp(200px, 48vw, 560px); 
        height: auto; 
        object-fit: contain; 
        filter: drop-shadow(0 25px 50px rgba(0,0,0,.12)) drop-shadow(0 0 60px rgba(0,17,81,.18)) drop-shadow(0 0 40px rgba(253,87,1,.12)); 
        border-radius: 20px;
        will-change: transform, opacity;
      }

      /* Brand text (like in logo2) */
      .intro__text {
        position: absolute;
        bottom: -16%;
        left: 50%;
        transform: translate(-50%, 8px);
        font-weight: 800;
        font-size: clamp(20px, 4vw, 40px);
        letter-spacing: 0.4px;
        color: #0b1a34; /* dark navy to match blue part of logo */
        text-shadow: 0 2px 16px rgba(0,0,0,.08);
        opacity: 0;
        pointer-events: none;
        white-space: nowrap;
      }
      
      /* Gradient sweep */
      .intro__sweep { 
        position: absolute; 
        inset: -10%; 
        background: linear-gradient(120deg, 
          rgba(0,17,81,0) 0%, 
          rgba(0,17,81,.18) 35%,
          rgba(253,87,1,.22) 52%, 
          rgba(0,17,81,.16) 68%,
          rgba(0,17,81,0) 100%); 
        transform: translateX(-200%) rotate(-5deg); 
        pointer-events: none;
        border-radius: 20px;
        filter: blur(20px);
      }
      
      /* Ring pulse */
      .intro__ring {
        position: absolute;
        inset: -15%;
        border: 2px solid rgba(0,17,81,.35);
        border-radius: 24px;
        opacity: 0;
        pointer-events: none;
      }
      
      /* Floating elements */
      .intro__floaters {
        position: absolute;
        inset: 0;
        pointer-events: none;
      }
      
      .floater {
        position: absolute;
        background: linear-gradient(135deg, rgba(0,17,81,.7), rgba(253,87,1,.7));
        border-radius: 4px;
        opacity: 0;
        box-shadow: 0 4px 12px rgba(0,17,81,.28);
      }
      
      /* Geometric lines */
      .intro__grid {
        position: absolute;
        inset: 0;
        pointer-events: none;
        opacity: 0;
      }
      
      .grid-line {
        position: absolute;
        background: linear-gradient(90deg, 
          transparent, 
          rgba(0,17,81,.18) 50%, 
          transparent);
        height: 1px;
      }
      
      .grid-line--v {
        width: 1px;
        height: 100%;
        background: linear-gradient(180deg, 
          transparent, 
          rgba(253,87,1,.22) 50%, 
          transparent);
      }
      
      /* Content reveal */
      main { opacity: 0; }
      .container { padding: 24px; max-width: 1100px; margin-inline: auto; }
      
      @media (prefers-reduced-motion: reduce) {
        /* Keep intro visible; we still respect reduced motion by avoiding extra effects if needed via JS */
        .intro { display: grid; }
        main { opacity: 1; }
      }

      /* Responsive tuning so the frame looks consistent on small screens */
      @media (max-width: 768px) {
        .intro { padding: 8px; }
        .intro__logo { width: min(68vw, 420px); }
        .intro__ring { inset: -10%; border-width: 1.5px; border-radius: 22px; }
        .intro__sweep { inset: -6%; filter: blur(14px); border-radius: 22px; }
        .grid-line, .grid-line--v { opacity: 0.6; }
        .container { padding: 16px; }
      }

      @media (max-width: 480px) {
        .intro { padding: 6px; }
        .intro__logo { width: min(78vw, 360px); }
        .intro__ring { inset: -8%; border-width: 1.25px; border-radius: 20px; }
        .intro__sweep { inset: -4%; filter: blur(12px); border-radius: 20px; }
        .grid-line, .grid-line--v { opacity: 0.5; }
      }
    </style>
  </head>
  <body class="intro-lock">
    <Navbar />
    <div id="intro" class="intro" aria-hidden="true">
      <div class="intro__stage">
        
        <!-- Grid lines -->
        <div class="intro__grid" id="grid">
          <div class="grid-line" style="top: 20%; width: 100%;"></div>
          <div class="grid-line" style="top: 50%; width: 100%;"></div>
          <div class="grid-line" style="top: 80%; width: 100%;"></div>
          <div class="grid-line grid-line--v" style="left: 25%;"></div>
          <div class="grid-line grid-line--v" style="left: 50%;"></div>
          <div class="grid-line grid-line--v" style="left: 75%;"></div>
        </div>
        
        <!-- Floating elements -->
        <div class="intro__floaters" id="floaters"></div>
        
        <div class="intro__logoWrap">
          <div class="intro__ring"></div>
          <img id="introLogo" class="intro__logo" src="/logo.png" alt="UMKMotion logo" />
          <div class="intro__sweep"></div>
          <div id="introText" class="intro__text">{title}</div>
        </div>
      </div>
    </div>
    <div class="app">
      <main id="content">
        <div class="container">
          <slot />
        </div>
      </main>
  </div>

  <script type="module">
      import gsap from 'https://cdn.jsdelivr.net/npm/gsap@3.12.5/index.js';

      // Check if intro has been seen before
      const introSeen = document.cookie.split('; ').find(row => row.startsWith('introSeen='));
      if (introSeen) {
        // Skip intro if already seen, immediately unlock scroll and show content
        document.documentElement.classList.remove('intro-lock');
        document.body.classList.remove('intro-lock');
        const content = document.getElementById('content');
        if (content) content.style.opacity = '1';
        const intro = document.getElementById('intro');
        if (intro) intro.style.display = 'none'; // hide intro if already seen
        // Do not run the rest of the script
      } else {
        // Run intro animation if not seen
        // lock scroll during intro
        document.documentElement.classList.add('intro-lock');
        document.body.classList.add('intro-lock');
        const intro = document.getElementById('intro');
        const logo = document.getElementById('introLogo');
        const content = document.getElementById('content');
        const circles = document.querySelectorAll('.circle');
        const sweep = document.querySelector('.intro__sweep');
        const ring = document.querySelector('.intro__ring');
        const grid = document.getElementById('grid');
        const floatersContainer = document.getElementById('floaters');
        const logoWrap = document.querySelector('.intro__logoWrap');

        // Preload optional second logo and append if exists
        async function loadSecondLogo() {
          const candidates = ['/logo2.png', '/logo2.jpg', '/logo2.jpeg', '/logo2.webp', '/logo2.svg'];
          for (const src of candidates) {
            try {
              const resp = await fetch(src, { method: 'HEAD' });
              if (resp.ok) {
                const img = new Image();
                img.id = 'introLogo2';
                img.className = 'intro__logo';
                img.src = src;
                img.alt = 'UMKMotion logo 2';
                img.style.position = 'absolute';
                img.style.inset = '0';
                img.style.margin = 'auto';
                img.style.opacity = '0';
                logoWrap.appendChild(img);
                await new Promise((res)=>{ img.onload = res; img.onerror = res; });
                // Match box of original logo exactly (rendered size)
                const cs = getComputedStyle(logo);
                const rect = logo.getBoundingClientRect();
                img.style.width = rect.width ? `${rect.width}px` : cs.width;
                img.style.height = rect.height ? `${rect.height}px` : cs.height;
                img.style.objectFit = 'contain';
                img.style.borderRadius = cs.borderRadius;
                img.style.zIndex = '2';
                return img;
              }
            } catch (_) {}
          }
          return null;
        }

        const logo2 = await loadSecondLogo();

        // Create floating elements
        const floaterCount = 12;
        const floaters = [];
        for (let i = 0; i < floaterCount; i++) {
          const f = document.createElement('div');
          f.className = 'floater';
          const size = Math.random() * 8 + 4;
          f.style.width = `${size}px`;
          f.style.height = `${size}px`;
          f.style.left = `${Math.random() * 100}%`;
          f.style.top = `${Math.random() * 100}%`;
          f.style.transform = `rotate(${Math.random() * 360}deg)`;
          floatersContainer.appendChild(f);
          floaters.push(f);
        }

        // Initial states
        gsap.set(content, { opacity: 0, y: 30 });
        gsap.set(logo, { opacity: 0, scale: 0.6, rotationY: -25, y: 30 });
        if (logo2) gsap.set(logo2, { opacity: 0, scale: 1.02 });
        if (circles.length) gsap.set(circles, { opacity: 0, scale: 0.5 });
        gsap.set(ring, { opacity: 0, scale: 0.8 });
        gsap.set(grid, { opacity: 0 });
        gsap.set(floaters, { opacity: 0, scale: 0 });

        const tl = gsap.timeline({ 
          defaults: { ease: 'power3.out' }
        });

        // 1) Grid appear
        tl.to(grid, {
          opacity: 1,
          duration: 0.8,
          ease: 'power2.inOut'
        });
        // 2) Circles morph in (only if present)
        if (circles.length) {
          tl.to(circles, {
            opacity: 1,
            scale: 1,
            duration: 1.2,
            stagger: 0.15,
            ease: 'elastic.out(1, 0.6)'
          }, '-=0.4');
        }
        // 3) Floaters burst
        tl.to(floaters, {
          opacity: 1,
          scale: 1,
          duration: 0.8,
          stagger: {
            each: 0.05,
            from: 'center'
          },
          ease: 'back.out(2)'
        }, '-=0.6')
        // 4) Logo reveal with 3D flip
        .to(logo, {
          opacity: 1,
          scale: 1.15,
          rotationY: 0,
          y: 0,
          duration: 1.2,
          ease: 'power4.out'
        }, '-=0.5')
        // 5) Ring pulse
        .to(ring, {
          opacity: 1,
          scale: 1.2,
          duration: 0.8,
          ease: 'power2.out'
        }, '<0.2')
        .to(ring, {
          scale: 1.4,
          opacity: 0,
          duration: 0.8,
          ease: 'power2.in'
        })
        // 6) Gradient sweep
        .fromTo(sweep, 
          { x: '-200%', rotation: -5 }, 
          { x: '200%', rotation: 5, duration: 1.4, ease: 'power2.inOut' }, 
          '<-0.3'
        )
        // 6.5) Swap during sweep pass (midpoint)
        .call(() => {
          if (logo2) {
            // Re-sync dimensions to current rendered size just before swap
            const rectNow = logo.getBoundingClientRect();
            logo2.style.width = `${rectNow.width}px`;
            logo2.style.height = `${rectNow.height}px`;
            // Copy current transform to ensure perfect overlap
            const csLogo = getComputedStyle(logo);
            logo2.style.transform = csLogo.transform !== 'none' ? csLogo.transform : '';
            logo2.style.transformOrigin = csLogo.transformOrigin || '50% 50%';
            logo.style.transformOrigin = csLogo.transformOrigin || '50% 50%';
            // Responsive horizontal nudge to visually center
            const vw = window.innerWidth;
            let offsetX = -41; // desktop default
            if (vw <= 480) offsetX = -23;       // phones: shift right vs desktop
            else if (vw <= 768) offsetX = -30; // tablets: less left than desktop
            gsap.set(logo2, { x: offsetX });
            // Crossfade only (no scale) for exact match
            gsap.to(logo, { opacity: 0, duration: 0.35, ease: 'power2.out' });
            gsap.to(logo2, { opacity: 1, duration: 0.45, ease: 'power2.out' });
          }
        }, null, '<0.7')
        // 7) Logo settle (whichever is visible now)
        .add(() => {
          const L2 = document.getElementById('introLogo2');
          const active = L2 && getComputedStyle(L2).opacity !== '0' ? L2 : logo;
          gsap.to(active, { scale: 1, duration: 0.7, ease: 'elastic.out(1, 0.5)' });
        }, '-=0.5')
        // 8) Circles breathe (only if present)
        if (circles.length) {
          tl.to(circles, {
            scale: 1.15,
            duration: 1.5,
            stagger: 0.1,
            ease: 'sine.inOut',
            yoyo: true,
            repeat: 1
          }, '-=0.8');
        }
        // 9) Floaters drift
        tl.to(floaters, {
          y: '+=60',
          x: (i) => (Math.random() - 0.5) * 40,
          rotation: '+=180',
          opacity: 0,
          duration: 1.2,
          stagger: {
            each: 0.03,
            from: 'random'
          },
          ease: 'power2.inOut'
        }, '-=1')
        // 10) Content reveal
        .to(content, {
          opacity: 1,
          y: 0,
          duration: 1,
          ease: 'power3.out'
        }, '-=0.6')
        // 11) Fade out intro and set cookie
        .to([intro, grid], { opacity: 0, duration: 1, ease: 'power2.inOut' }, '-=0.3')
        .set(intro, { display: 'none' })
        .add(() => {
          // restore scroll
          document.documentElement.classList.remove('intro-lock');
          document.body.classList.remove('intro-lock');
          // Set permanent cookie that intro has been seen
          document.cookie = 'introSeen=true; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/';
        });
      }
    </script>
  </body>
</html>